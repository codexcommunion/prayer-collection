#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Generate static data module for browser compatibility
 * This script imports all JSON files and creates a JavaScript module
 * that can work in both Node.js and browser environments
 */

console.log('🔄 Generating static prayer data...');

const prayersDir = path.join(__dirname, '..', 'prayers');
const prayerFiles = fs.readdirSync(prayersDir)
  .filter(file => file.endsWith('.json'))
  .sort();

console.log(`📁 Found ${prayerFiles.length} prayer files`);

// Import all prayer JSON files
const prayers = {};
const validPrayers = [];

prayerFiles.forEach(file => {
  const filePath = path.join(prayersDir, file);
  const prayerId = path.basename(file, '.json');
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const prayer = JSON.parse(content);
    
    // Validate basic structure
    if (!prayer.metadata || !prayer.translations) {
      console.warn(`⚠️  Skipping ${file}: Missing required fields`);
      return;
    }
    
    prayers[prayerId] = prayer;
    validPrayers.push(prayer);
    
  } catch (error) {
    console.warn(`⚠️  Skipping ${file}: Invalid JSON - ${error.message}`);
  }
});

// Generate the static data module
const moduleContent = `// Auto-generated static prayer data
// This file is generated by scripts/generate-static-data.js
// Do not edit this file directly

/**
 * Static prayer data for universal compatibility
 * Works in both Node.js and browser environments
 */

// All prayers as a lookup object
const PRAYERS = ${JSON.stringify(prayers, null, 2)};

// All prayers as an array
const ALL_PRAYERS = ${JSON.stringify(validPrayers, null, 2)};

// Pre-computed indexes for performance
const PRIMARY_CATEGORIES = ${JSON.stringify([...new Set(validPrayers.map(p => p.metadata.primary_category).filter(Boolean))], null, 2)};

const ALL_LABELS = ${JSON.stringify([...new Set(validPrayers.flatMap(p => p.metadata.labels || []))].sort(), null, 2)};

const SUPPORTED_LANGUAGES = ['la', 'en', 'es', 'fr', 'de', 'it', 'pt', 'pl'];

// Prayers grouped by primary category
const PRAYERS_BY_CATEGORY = {};
ALL_PRAYERS.forEach(prayer => {
  const category = prayer.metadata.primary_category;
  if (category) {
    if (!PRAYERS_BY_CATEGORY[category]) {
      PRAYERS_BY_CATEGORY[category] = [];
    }
    PRAYERS_BY_CATEGORY[category].push(prayer);
  }
});

// Prayers grouped by labels
const PRAYERS_BY_LABEL = {};
ALL_PRAYERS.forEach(prayer => {
  const labels = prayer.metadata.labels || [];
  labels.forEach(label => {
    if (!PRAYERS_BY_LABEL[label]) {
      PRAYERS_BY_LABEL[label] = [];
    }
    PRAYERS_BY_LABEL[label].push(prayer);
  });
});

// Prayers grouped by importance
const PRAYERS_BY_IMPORTANCE = {};
ALL_PRAYERS.forEach(prayer => {
  const importance = prayer.metadata.importance;
  if (importance) {
    if (!PRAYERS_BY_IMPORTANCE[importance]) {
      PRAYERS_BY_IMPORTANCE[importance] = [];
    }
    PRAYERS_BY_IMPORTANCE[importance].push(prayer);
  }
});

module.exports = {
  PRAYERS,
  ALL_PRAYERS,
  PRIMARY_CATEGORIES,
  ALL_LABELS,
  SUPPORTED_LANGUAGES,
  PRAYERS_BY_CATEGORY,
  PRAYERS_BY_LABEL,
  PRAYERS_BY_IMPORTANCE
};
`;

// Write the static data module
const outputPath = path.join(__dirname, '..', 'lib', 'prayer-data.js');
const libDir = path.dirname(outputPath);

// Ensure lib directory exists
if (!fs.existsSync(libDir)) {
  fs.mkdirSync(libDir, { recursive: true });
}

fs.writeFileSync(outputPath, moduleContent);

// Calculate statistics
const primaryCategories = [...new Set(validPrayers.map(p => p.metadata.primary_category).filter(Boolean))];
const allLabels = [...new Set(validPrayers.flatMap(p => p.metadata.labels || []))];

console.log(`✅ Generated static data module: ${outputPath}`);
console.log(`📊 Exported ${validPrayers.length} prayers`);
console.log(`📁 Primary categories: ${primaryCategories.length}`);
console.log(`🏷️  Labels: ${allLabels.length}`);